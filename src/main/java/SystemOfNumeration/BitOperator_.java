package SystemOfNumeration;

public class BitOperator_ {
    /**
     * 原码、反码、补码
     *
     * 对于有符号而言：
     *    1）二进制的最高位是符号位：0表示正数，1表示负数
     *    2）正数的原码、反码、补码都一样（三码合一）
     *    3）负数的反码 = 它的原码符号位不变，其它位取反
     *    4）负数的补码 = 它的反码 + 1，负数的反码 = 负数的补码 - 1
     *    5）0的反码、补码都是0
     *    6）Java没有无符号数，换言之，Java中的数都是有符号的
     *    7）在计算机运算的时候，都是以 补码 的方式来运算的
     *    8）!!当我们看运算结果的时候，要看它的原码
     */

    /**
     * 位运算符
     *
     * Java中有7个位运算（&、|、^、~、>> 、<<、>>>）
     * 分别是 按位与&、按位或|、按位异或^、按位取反~，它们的运算规则是：
     *    按位与&：两位全为1，结果为1，否则为0
     *    按位或|：两位有一个为1，结果为1，否则为0
     *    按位异或^：两位一个为0，一个为1，结果为1，否则为0
     *    按位取反~：0>-1，1->0
     *
     *    练习：2&3=?, ~-2=?, ~2=?, 2|3=?, 2^3=?
     */
    public static void main(String[] args) {
        // 在计算机运算的时候，都是以 补码 的方式来运算的
        System.out.println(2&3);
        /**
         * 1）先得到 2 的原码：00000000 00000000 00000000 00000010
         * 2）2 的补码：00000000 00000000 00000000 00000010
         * 3）3 的原码：00000000 00000000 00000000 00000011
         * 4）3 的补码：00000000 00000000 00000000 00000011
         * 5）按位与&：
         *    00000000 00000000 00000000 00000010
         *    00000000 00000000 00000000 00000011
         *   &运算后的补码 = 00000000 00000000 00000000 00000010（符号位为0）
         *   &运算后的原码 = 00000000 00000000 00000000 00000010
         * 6）结果转为 十进制：2
         */
        System.out.println(~-2);
        /**
         * -2 原码：10000000 00000000 00000000 00000010
         * -2 反码：11111111 11111111 11111111 11111101
         * -2 补码：11111111 11111111 11111111 11111110
         * ~-2操作：00000000 00000000 00000000 00000001（运算后的补码）
         * 运算后原码：00000000 00000000 00000000 00000001 => 1
         */
        System.out.println(~2);
        /**
         * 2 补码：00000000 00000000 00000000 00000010
         * ~2操作：11111111 11111111 11111111 11111101（运算后的补码）
         * 运算后反码：11111111 11111111 11111111 11111100
         * 运算后原码：10000000 00000000 00000000 00000011 => -3
         */
        System.out.println(2|3);
        System.out.println(2^3);
    }
}
